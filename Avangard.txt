USE master
GO
drop database Avangard


USE master
GO

CREATE DATABASE Avangard;
GO

USE Avangard
GO

---------------------------------------Правила и Пользовательскте типы----------------------------------
CREATE TYPE Объем FROM nvarchar (40) NOT NULL
GO 
CREATE RULE R_Volume AS @Объем >=0.099 AND @Объем < 99
GO

CREATE TYPE Telephone FROM nvarchar (15) NOT NULL
GO
CREATE RULE R_Telephone AS @Telephone like '+7[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'
GO

CREATE TYPE Area FROM float NOT NULL
GO
CREATE RULE R_Area AS @Area IN ('1000', '2000', '3000')
GO

--------------------------------Таблица Продукты---------------------------------------------

CREATE TABLE Продукты(
ID_Продукта INT NOT NULL, 
Тип NVARCHAR(30) NOT NULL, 
Наименование NVARCHAR(40) NOT NULL
CONSTRAINT PK_IDПродукта PRIMARY KEY (ID_Продукта)
)
GO

--------------------------------Таблица Сорт---------------------------------------------

CREATE TABLE Сорт(
ID_Сорта INT NOT NULL,
Название NVARCHAR (30) NOT NULL,
ID_Продукта INT NOT NULL,
Цена_за_тонну MONEY NOT NULL,
Объем FLOAT (40) NOT NULL,
Срок_хранения NVARCHAR  (30) NOT NULL,
Температура TINYINT NOT NULL,
Тип_грунта NVARCHAR (20)
CONSTRAINT PK_IDСорта PRIMARY KEY (ID_Сорта)
CONSTRAINT FK_IDПродукта FOREIGN KEY (ID_Продукта) REFERENCES Продукты (ID_Продукта)
)
GO

--------------------ALTER TABLE Сорт
--------------------ADD CONSTRAINT Темп DEFAULT 10 FOR Температура
--------------------GO

--------------------------------Таблица Клиент---------------------------------------------

CREATE TABLE Клиент(
ID_Клиента INT NOT NULL,
Название_фирмы NVARCHAR (20) NOT NULL UNIQUE,
Начало_сотрудничества DATE NOT NULL DEFAULT (CONVERT(DATE, GETDATE())),
ФИО_представителя NVARCHAR (50) UNIQUE,
Адрес NVARCHAR (40) NOT NULL
CONSTRAINT PK_ID_Клиента PRIMARY KEY (ID_Клиента)
)
GO

--------------------------------Таблица Заказ---------------------------------------------

CREATE TABLE Заказ(
Номер_заказа INT NOT NULL,
ID_Клиента INT NOT NULL,
Дата_заказа DATE NOT NULL DEFAULT (CONVERT(DATE, GETDATE())),
Статус NVARCHAR (15) NOT NULL,
Путь FLOAT (20) NOT NULL
CONSTRAINT PK_Номер_заказа PRIMARY KEY (Номер_заказа)
CONSTRAINT FK_ID_Клиента FOREIGN KEY (ID_Клиента) REFERENCES Клиент (ID_Клиента)
)
GO

--ALTER TABLE Заказ
--ADD CONSTRAINT FK_Номер_заказа FOREIGN KEY (Номер_заказа) REFERENCES Сбор (Номер_заказа)
--GO

------------------------ALTER TABLE Заказ
------------------------ADD CONSTRAINT DF_Путь DEFAULT 50 FOR Путь
------------------------GO

--------------------------------Таблица Должность---------------------------------------------

CREATE TABLE Должность(
ID_Должности INT NOT NULL,
Подразделение NVARCHAR (20) NOT NULL,
Должность NVARCHAR (20) NOT NULL,
З_П MONEY NOT NULL
CONSTRAINT PK_ID_Должности PRIMARY KEY (ID_Должности)
)
GO

--------------------------------Таблица Сотрудник---------------------------------------------

CREATE TABLE Сотрудники(
Личный_номер INT NOT NULL,
ID_Должности INT NOT NULL,
Стаж NVARCHAR (10) NOT NULL,
ФИО NVARCHAR (50) NOT NULL,
ИНН NVARCHAR (40) NOT NULL,
Серия_номер_паспорта NVARCHAR (12) NOT NULL,
Номер_телефона Telephone,
Адрес_проживания NVARCHAR (50),
З_П MONEY NOT NULL
CONSTRAINT PK_Личный_номер PRIMARY KEY (Личный_номер)
CONSTRAINT FK_ID_Должности FOREIGN KEY (ID_Должности) REFERENCES Должность (ID_Должности),
)
GO



--------------------------------Таблица Теплицы---------------------------------------------

CREATE TABLE Теплицы(
Номер_теплицы INT NOT NULL,
Месторасположение NVARCHAR (40),
Площадь Area,
Грунт NVARCHAR (20) NOT NULL,
Количество_работников INT NOT NULL,
Температурный_режим TINYINT NOT NULL
CONSTRAINT PK_Номер_теплицы PRIMARY KEY (Номер_теплицы)
)
GO

--------------------------ALTER TABLE Теплицы
--------------------------ADD CONSTRAINT DF_Площадь DEFAULT 1000 FOR Площадь
--------------------------GO

--------------------------------Таблица Транспорт---------------------------------------------

CREATE TABLE Транспорт(
Регистрационный_номер NVARCHAR (6) NOT NULL,
Вместимость NVARCHAR (20) NOT NULL,
Номер_страхового_полиса NVARCHAR (20) NOT NULL,
CONSTRAINT PK_Регистрационный_номер PRIMARY KEY (Регистрационный_номер)
)
GO

--------------------------------Таблица Выращивание---------------------------------------------

CREATE TABLE Выращивание(
ID_Сорта INT NOT NULL,
Температурный_режим TINYINT NOT NULL,
Тип_грунта NVARCHAR (20),
Номер_теплицы INT NOT NULL 
)
GO

ALTER TABLE Выращивание
ADD CONSTRAINT PK_ID_Сорта PRIMARY KEY (ID_Сорта)
ALTER TABLE Выращивание
ADD CONSTRAINT FK_Номер_теплицы FOREIGN KEY (Номер_теплицы) REFERENCES Теплицы (Номер_теплицы)
ALTER TABLE Выращивание
ADD CONSTRAINT FK_Сорт_в_выращивание FOREIGN KEY (ID_Сорта) REFERENCES Сорт (ID_Сорта)
GO

--------------------------------Таблица Сбор---------------------------------------------
CREATE TABLE Сбор(
Номер_заказа INT NOT NULL,
Личный_номер INT NOT NULL
PRIMARY KEY (Номер_заказа)
CONSTRAINT FK_Личный_номер FOREIGN KEY (Личный_номер) REFERENCES Сотрудники (Личный_номер)
)
GO

--------------------------------Таблица Доставка---------------------------------------------

CREATE TABLE Доставка(
Номер_заказа INT NOT NULL,
Регистрационный_номер NVARCHAR (6) NOT NULL,
Адрес NVARCHAR (40) NOT NULL, 
Объем Объем
PRIMARY KEY (Номер_заказа, Регистрационный_номер)
)
GO

ALTER TABLE Доставка
ADD CONSTRAINT FK_Регистрационный_номер FOREIGN KEY (Регистрационный_номер) REFERENCES  Транспорт (Регистрационный_номер)
GO
ALTER TABLE Доставка
ADD CONSTRAINT FK_Номер_зак FOREIGN KEY (Номер_заказа) REFERENCES Заказ (Номер_заказа)
GO

--------------------------------Таблица Сбор заказа---------------------------------------------

CREATE TABLE Сбор_заказа(
Номер_заказа INT NOT NULL,
ID_Сорта INT NOT NULL,
Объем Объем
PRIMARY KEY(Номер_заказа, ID_Сорта )
)
GO

ALTER TABLE Сбор_заказа
ADD CONSTRAINT FK_Номе_рзаказа FOREIGN KEY (Номер_заказа) REFERENCES Заказ (Номер_заказа)
GO
ALTER TABLE Сбор_заказа
ADD CONSTRAINT FK_ID_Сорта FOREIGN KEY (ID_Сорта) REFERENCES Сорт (ID_Сорта)
ALTER TABLE Сбор_заказа
ADD CONSTRAINT FK_НОМЕР_ЗАКАЗА FOREIGN KEY (Номер_заказа) REFERENCES Сбор (Номер_заказа)
GO

---------------------------------------Умолчания----------------------------------

CREATE DEFAULT Темп AS 10
GO
EXEC sp_bindefault 'Темп', '[Сорт].[Температура]'
GO

CREATE DEFAULT DF_Путь AS 50
GO
EXEC sp_bindefault 'DF_Путь', '[Заказ].[Путь]'
GO

CREATE DEFAULT DF_Площадь AS 1000
GO
EXEC sp_bindefault 'DF_Площадь', '[Теплицы].[Площадь]'
GO

CREATE DEFAULT Статус AS 'Не одобрено'
GO
EXEC sp_bindefault 'Статус', '[Заказ].[Статус]'
GO


------------------------------------Заполнение таблицы Продукты--------------------------------------

USE Avangard;
INSERT INTO Продукты (ID_Продукта, Тип, Наименование)
VALUES(1, 'Овощ', 'Огурец'),
	  (2, 'Овощ', 'Томат'),
	  (3, 'Овощ', 'Перец'),
	  (4, 'Овощ', 'Кабачок'),
	  (5, 'Овощ', 'Баклажан'),
	  (6, 'Фрукт', 'Яблокао'),
	  (7, 'Фрукт', 'Груша'),
	  (8, 'Фрукт', 'Абрикос'),
	  (9, 'Фрукт', 'Вишня'),
	  (10, 'Фрукт', 'Слива'),
	  (11, 'Ягода', 'Клубника'),
	  (12, 'Ягода', 'Малина'),
	  (13, 'Ягода', 'Черная_смородина'),
	  (14, 'Ягода', 'Красная_смородина'),
	  (15, 'Ягода', 'Ежевика')
GO

--select*
--from Продукты

------------------------------------Заполнение таблицы Сорт--------------------------------------

USE Avangard;
INSERT INTO Сорт (ID_Сорта, Название, ID_Продукта, Цена_за_тонну, Объем, Срок_хранения, Температура, Тип_грунта)
VALUES				(1,		'Амур',			1,		'100000',		'50',	'40', 15, 'Суглинистый'), 
					(2,		'Директор',		1,		'120000',		'49.5',	'40', 15, 'Суглинистый'),
					(3,		'Амур',			2,		'90000',		'70',	'20', default, 'Супесчаный'),
					(4,		'Багира',		2,		'95000',		'40',	'20', default, 'Супесчаный'),
					(5,		'Апекс',		6,		'50000',		'120',	'40', 0, 'Суглинистый'),
					(6,		'Айдаред',		6,		'60000',		'150',	'40', 0, 'Суглинистый'),
					(7,		'Богатырь',		6,		'55000',		'180',	'40', 0, 'Суглинистый'),
					(8,		'Августина',	7,		'80000',		'135',	'35', 1, 'Любой'),
					(9,		'Бере Диль',	7,		'85000',		'120',	'35', 1, 'Любой'),
					(10,	'Викинг',		11,		'150000',		'80',	'10', 5, 'Песчано-суглинистая'),
					(11,	'Альба',		11,		'200000',		'87',	'10', 5, 'Песчано-суглинистая'),
					(12,	'Альфа',		14,		'110000',		'60',	'10', 1, 'Супесчаная'),
					(13,	'Валентиновка', 14,		'98000',		'10',	'10', 1, 'Супесчаная'),
					(14,	'Лох Тей',		15,		'250000',		'35',	'10', 0, 'Суглинок'),
					(15,	'Карака Блек',	15,		'270000',		'20',	'10', 0, 'Суглинок')
GO

--select*
--from Сорт

------------------------------------Заполнение таблицы Клиент--------------------------------------

USE Avangard;
INSERT INTO Клиент(ID_Клиента, Название_фирмы, Начало_сотрудничества, ФИО_представителя, Адрес)
VALUES			  (1,			'ООО"Вишенка"',			default,			'Чери Анатольевна Пик',					'Васильевский проезд 24'),
				  (2,			'ООО"Павловец"',		default,			'Иванов Иван Иванович',					'Гагарина 45'),
				  (3,			'ООО"Троцкий"',			default,			'Лев Давидович Троцкий',				'Интернациональная 10'),
				  (4,			'ОАО"Витязь"',			default,			'Илья Иванович Муромец',				'Семченская 9'),
				  (5,			'ИП"Кораблино"',		default,			'Василий Педросович Адупа',				'Площадь Победы'),
				  (6,			'ООО"Патрульный"',		default,			'Андрей Сергеевич Танк',				'Шлаково 23'),
				  (7,			'ООО"Карамба"',			default,			'Михаил Валентинович Орлов',			'Московское шоссе 91'),
				  (8,			'ООО"+100500"',			'20210423',			'Максим Сергеевич Голополосов',			'1 мая 4'),
				  (9,			'ЗАО"Дисклаймер"',		'20210401',			'Пьюди Константинович Пай',				'Новая 9'),
				  (10,			'В.В.П.',				'20210215',			'Владислав Владиславович Хутин',		'Циолковского 32'),
				  (11,			'ИП"ГНК"',				'20210101',			'Андрей Иванович Храпов',				'Площадь Театральныя 50'),
				  (12,			'ООО"Тьюлих"',			'20201105',			'Педро Дель-Падре',						'Октяборьская 45'),
				  (13,			'ООО"Тыры-Пыры"',		'20201017',			'Василий Кирилович Варшава',			'Броння 10'),
				  (14,			'ГГ"Капут',				'20200902',			'Иосиф Виссарионович Джугашвили',		'Бирбзова 21'),
				  (15,			'ООО"ОГРН"',			'20200807',			'Олег Григорьевич Распутин',			'Станкозаводская 20')
GO

--select *
--from Клиент

------------------------------------Заполнение таблицы Заказ--------------------------------------

USE Avangard;
INSERT INTO Заказ (Номер_заказа,  ID_Клиента, Дата_заказа,		Статус,		Путь)
VALUES			  (1,					1,		default,		'Одобрено',	 default),
				  (2,					1,		'20210421',		'Одобрено',	   '100'),
				  (3,					2,		'20210101',		'Одобрено',	 default),
				  (4,					3,		'20201015',		'Одобрено',		'40'),
				  (5,					4,		default,		'Одобрено',		'80'),
				  (6,					4,		default,		'Одобрено',		'80'),
				  (7,					5,		'20200517',		'Одобрено',	 default),
				  (8,					6,		'20201015',		'Одобрено',		'40'),
				  (9,					6,		'20201015',		'Одобрено',		'40'),
				  (10,					7,		'20201015',		'Одобрено',		'90'),
				  (11,					8,		'20201015',		'Одобрено',		'70'),
				  (12,					9,		'20201015',		'Одобрено',	   '122'),
				  (13,					10,		'20201015',		'Одобрено',		'45'),
				  (14,					10,		'20201015',		default,		'45'),
				  (15,					10,		'20201015',		default,		'45')
GO




--select *
--from Заказ

------------------------------------Заполнение таблицы Должность--------------------------------------

USE Avangard;
INSERT INTO Должность(ID_Должности, Подразделение,	Должность, З_П)
VALUES					(1,		 'Теплица',		'Садовод',				'21433'),
						(2,	     'Теплица',		'Помощник Садовода',	'15450'),
						(3,	     'Доставка',	'Водитель',				'54500'),
						(4,	     'Доставка',	'Помощник Водителя',	'30400'),
						(5,		 'Сборка',		'Сборщик заказа',		'20800')
GO
	
--select *
--from Должность

------------------------------------Заполнение таблицы Сотрудники--------------------------------------

USE Avangard;
INSERT INTO Сотрудники(Личный_номер, ID_Должности, Стаж,			ФИО,									ИНН,	Серия_номер_паспорта,	Номер_телефона,		Адрес_проживания, З_П)
VALUES				  (1,			    1,	   '9',		'Антон Антонович Антонов',					'000000000001',	'6114880572',		'+78005553535',		'Станкозаводская 20',		 21433), 
					  (2,			    1,	   '13',	'Василий Васильевич Васильев',				'000000000002', '6114330573',		'+78005553536',		'Бирбзова 21',				 21433),
					  (3,			    1,	   '14',	'Петр Петрович Петров',						'000000000003', '6114880574',		'+78005553537',		'Броння 10',				 21433),
					  (4,			    1,	   '10',	'Андрей Андреевич Андреев',					'000000000004', '6114880575',		'+78005553538',		'Броння 10',				 21433),
					  (5,			    1,	   '15',	'Иван Иванович Иванов',						'000000000005', '6114330576',		'+78005553539',		'Октяборьская 45',			 21433),
					  (6,			    2,	   '1',	'	Константин Константинович Константинов',	'000000000006', '6114330577',		'+78005553540',		'Площадь Театральныя 50',	 15450),
					  (7,				2,	   '1',		'Педро Педросович Перосов',					'000000000007', '6114330578',		'+78005553541',		'Циолковского 32',			 15450),
					  (8,				2,	   '3',		'Сергей Сергеевич Сергеев',					'000000000008', '6114330579',		'+78005553542',		'Новая 9',					 15450),
					  (9,				3,	   '7',		'Виктор Викторови Викторов',				'000000000009', '6114330580',		'+780055535433',	'1 мая 4',					 54500),
					  (10,				3,	   '11',	'Эльдар Эльдарович Эльдаров',				'000000000010', '6114330581',		'+78005553544',		'Московское шоссе 9',		 54500),
					  (11,				3,	   '11',	'Алексей Алексеевич Алексеев',				'000000000011', '6114330582',		'+78005553545',		'Шлаково 23',				 54500),
					  (12,				3,	   '14',	'Валентин Валентинович Валентинов',			'000000000012', '6114330583',		'+78005553546',		'Площадь Победы',			 54500),
					  (13,				3,	   '14',	'Алексаедр Александрович Александров',		'000000000013', '6114330584',		'+78005553547',		'Семченская 9',				 54500),
					  (14,				4,	   '4',		'Михаил Михайлович Михайлов',				'000000000014', '6114330585',		'+78005553548',		'Интернациональная 10',		 30400),
					  (15,				4,	   '2',		'Владислав Владиславович Владиславов',		'000000000015', '6114330586',		'+78005553549',		'Васильевский проезд 24',	 30400),
					  (16,				5,	   '10',	'Роман Романович Романов',					'000000000016', '6114330587',		'+78005553550',		'Васильевский проезд 4',	 20800)
GO

--select *
--from Сотрудники

------------------------------------Заполнение таблицы Теплицы--------------------------------------

USE Avangard;
INSERT INTO Теплицы (Номер_теплицы, Месторасположение, Площадь, Грунт, Количество_работников, Температурный_режим)
VALUES			   (1,			'д. Хирино',		'1000',		'Суглинистый',			100,		15),
				   (2,			'д. Хирино',		'1000',		'Супесчаный',			100,		12),
				   (3,			'д. Хирино',		'1000',		'Песчано-суглинистая',	100,		10),
				   (4,			'д. Хирино',		'2000',		'Суглинистый',			200,		20),
				   (5,			'д. Хирино',		'2000',		'Супесчаный',			200,		15),
				   (6,			'д. Хирино',		default,	'Песчано-суглинистая',	200,		12),
				   (7,			'д. Хирино',		'3000',		'Суглинистый',			300,		20),
				   (8,			'д. Альютовов',		'1000',		'Суглинистый',			100,		10),
				   (9,			'д. Альютовов',		'1000',		'Суглинистый',			100,		15),
				   (10,			'д. Альютовов',		'3000',		'Супесчаный',			300,		20),
				   (11,			'д. Альютовов',		'3000',		'Песчано-суглинистая',	300,		12),
				   (12,			'д. Альютовов',		'3000',		'Супесчаный',			300,		15),
				   (13,			'пос. Романцво',	'1000',		'Супесчаный',			100,		10),
				   (14,			'пос. Романцво',	'1000',		'Песчано-суглинистая',	100,		20),
				   (15,			'пос. Романцво',	'1000',		'Песчано-суглинистая',	100,		12)
GO

--select *
--from Теплицы

------------------------------------Заполнение таблицы Транспорт--------------------------------------

USE Avangard;
INSERT INTO Транспорт (Регистрационный_номер, Вместимость, Номер_страхового_полиса)
VALUES				  ('В001СХ',				'100',			'0000000000'),
					  ('В002СХ',				'100',			'0000000001'),
					  ('В003СХ',				'100',			'0000000002'),
					  ('В004СХ',				'100',			'0000000003'),
					  ('В005СХ',				'100',			'0000000004'),
					  ('В006СХ',				'100',			'0000000005'),
					  ('В007СХ',				'100',			'0000000006'),
					  ('В008СХ',				'100',			'0000000007'),
					  ('В009СХ',				'50',			'0000000008'),
					  ('В010СХ',				'50',			'0000000009'),
					  ('В011СХ',				'50',			'0000000010'),
					  ('В012СХ',				'50',			'0000000011'),
					  ('В013СХ',				'20',			'0000000012'),
					  ('В014СХ',				'20',			'0000000013'),
					  ('В015СХ',				'20',			'0000000014')
GO

--select *
--from Транспорт

------------------------------------Заполнение таблицы Выращивание--------------------------------------

USE Avangard;
INSERT INTO Выращивание (ID_Сорта, Температурный_режим, Тип_грунта, Номер_теплицы)
VALUES					(1,				15,		  'Суглинистый',		  	  1),
						(2,				12,		  'Супесчаный',			  2),
						(3,				20,		  'Суглинистый',		  4),
						(4,				10,		  'Песчано-суглинистая',  	  3),
						(5,				12,		  'Песчано-суглинистая',  	  6),
						(6,				20,		  'Суглинистый',		  7),
						(7,				15,		  'Супесчаный',			  5),
						(8,				10,		  'Суглинистый',		  8),
						(9,				20,		  'Супесчаный',			  10),
						(10,				15,		  'Супесчаный',			  12),
						(11,				12,		  'Песчано-суглинистая',  	  11),
						(12,				12,		  'Песчано-суглинистая',  	  15),
						(13,				20,		  'Песчано-суглинистая',  	  14),
						(14,				10,		  'Супесчаный',			  13),
						(15,				15,		  'Суглинистый',		   9)
GO

--select *
--from Выращивание

------------------------------------Заполнение таблицы Сбор--------------------------------------

USE Avangard;
INSERT INTO Сбор (Номер_заказа, Личный_номер)
VALUES			 (1,				16),
				 (2,				16),
				 (3,				16),
				 (4,				16),
				 (5,				16),
				 (6,				16),
				 (7,				16),
				 (8,				16),
				 (9,				16),
				 (10,				16),
				 (11,				16),
				 (12,				16),
				 (13,				16),
				 (14,				16),
				 (15,				16)
GO

--select *
--from Сбор

------------------------------------Заполнение таблицы Доставка--------------------------------------

USE Avangard;
INSERT INTO Доставка (Номер_заказа, Регистрационный_номер,		Адрес,			 Объем)
VALUES				 (1,			'В001СХ',		  'Васильевский проезд 24',		'90'),
					 (2,			'В004СХ',		  'Гагарина 45',				'50'),
					 (3,			'В002СХ',		  'Интернациональная 10',		'80'),
					 (4,			'В008СХ',		  'Площадь Победы',				'60'),
					 (5,			'В015СХ',		  'Шлаково 23',					'10'),
					 (6,			'В011СХ',		  'Московское шоссе 91',		'40'),
					 (7,			'В005СХ',		  '1 мая 4',					'100'),
					 (8,			'В014СХ',		  'Новая 9',					'15'),
					 (9,			'В013СХ',		  'Циолковского 32',			'0,7'),
					 (10,			'В012СХ',		  'Площадь Театральныя 50',		'30'),
					 (11,			'В003СХ',		  'Октяборьская 45',			'55'),
					 (12,			'В004СХ',		  'Октяборьская 45',			'70'),
					 (13,			'В006СХ',		  'Броння 10',					'65'),
					 (14,			'В007СХ',		  'Бирбзова 21',				'95'),
					 (15,			'В010СХ',		  'Станкозаводская 20',			'25')
GO

--select *
--from Доставка

------------------------------------Заполнение таблицы Сбор_заказа--------------------------------------

USE Avangard;
INSERT INTO Сбор_заказа (Номер_заказа, ID_Сорта, Объем)
VALUES						(1,			1,	  '20'),
							(1,			3,	  '15'),
							(2,			11,	  '40'),
							(3,			10,	  '80'),
							(3,			15,	  '20'),
							(4,			4,	  '15'),
							(5,			9,	  '13'),
							(6,			5,	  '20'),
							(7,			8,	  '11'),
							(8,			1,	  '15'),
							(8,			5,	  '15'),
							(8,			3,	  '10'),
							(9,			14,	  '20'),
							(10,		7,	  '60'),
							(11,		11,	  '15')
GO

--select *
--from Сбор_заказа

------------------------------------Представления--------------------------------------

CREATE VIEW Должности_Сотрудников
AS
SELECT Сотрудники.ID_Должности,
	   Сотрудники.Личный_номер,
	   Должность.Подразделение,
	   Должность.Должность,
	   Сотрудники.Стаж,
	   Сотрудники.ФИО,
	   Сотрудники.З_П
FROM Сотрудники INNER JOIN Должность ON
Должность.ID_Должности = Сотрудники.ID_Должности
GO

--select *
--from Должности_Сотрудников
--GO

CREATE VIEW Сбор_заказа_Сорт_Продукт
AS
SELECT Сбор_заказа.Номер_заказа,
	   Сорт.ID_Сорта,
	   Продукты.ID_Продукта,
	   Продукты.Наименование,
	   Продукты.Тип,
	   Сорт.Название,
	   Сбор_заказа.Объем,
	   Сорт.Цена_за_тонну
FROM Сорт INNER JOIN Сбор_заказа ON
Сорт.ID_Сорта = Сбор_заказа.ID_Сорта INNER JOIN Продукты ON Продукты.ID_Продукта = Сорт.ID_Продукта
GO

--select *
--from Сбор_заказа_Сорт_Продукт
--GO

CREATE VIEW Конечная_цена_товара
as select *,
Цена_за_тонну * Объем as Сумма
from Сбор_заказа_Сорт_Продукт
GO

--select *
--from Конечная_цена_товара
--GO

CREATE VIEW Выращивание_в_теплице
AS
SELECT Выращивание.ID_Сорта,
	   Сорт.Название,
	   Выращивание.Номер_теплицы,
	   Теплицы.Месторасположение,
	   Теплицы.Площадь,
	   Теплицы.Грунт,
	   Теплицы.Количество_работников,
	   Теплицы.Температурный_режим
FROM Выращивание INNER JOIN Теплицы ON 
Выращивание.Номер_теплицы = Теплицы.Номер_теплицы
INNER JOIN Сорт ON Сорт.ID_Сорта = Выращивание.ID_Сорта
GO

--select *
--from Выращивание_в_теплице
--GO

CREATE VIEW Доставка_заказа
AS
SELECT Доставка.Номер_заказа,
	   Доставка.Адрес,
	   Доставка.Регистрационный_номер,
	   Доставка.Объем,
	   Заказ.ID_Клиента,
	   Заказ.Дата_заказа,
	   Заказ.Путь
FROM Доставка INNER JOIN Заказ ON 
Доставка.Номер_заказа = Заказ.Номер_заказа
GO

--select *
--from Доставка_заказа
--go

------------------------------------Триггеры--------------------------------------

GO
CREATE TRIGGER check_volume
ON Сбор_заказа
INSTEAD OF INSERT
AS
DECLARE @first INT, @last INT
SET @first = 0
	SELECT @last = COUNT (ID_Сорта)
		FROM INSERTED
DECLARE @volume_cort nvarchar (40), @ID_Sort INT
DECLARE @volume_zakaz nvarchar(40) 
DECLARE C1 CURSOR SCROLL
	FOR SELECT ID_Сорта, Объем
		FROM INSERTED
OPEN C1 
FETCH FIRST FROM C1
INTO @ID_Sort, @volume_zakaz
WHILE (@first < @last)
BEGIN
	SELECT @volume_cort = Объем
		FROM Сорт
			WHERE ID_Сорта = @ID_Sort
	IF (CONVERT (FLOAT, @volume_zakaz) > CONVERT (FLOAT, @volume_cort)) 
	begin 
		print ('Объем, указаный в заказе, превышает объем продукции на складе!')
	END
	ELSE
	BEGIN
	INSERT INTO Сбор_заказа
		SELECT*
			FROM INSERTED 
				WHERE ID_Сорта = @ID_Sort
	END
	FETCH NEXT FROM C1
	INTO @ID_Sort, @volume_zakaz
	SET @first = @first + 1
END
CLOSE C1
DEALLOCATE C1
GO

--drop TRIGGER check_volume

--insert into Сбор_заказа(Номер_заказа, ID_Сорта, 	Объем		)
--values			 (12,				13,				'11'		 )
--				 --(11,				1,				'10'		)
--GO

--select * 
--from Сбор_заказа

--delete 
--from Заказ
--where Номер_заказа = 10
--go

CREATE TRIGGER Check_insert_in_delivery
ON Доставка
INSTEAD OF INSERT
AS
DECLARE @first INT, @last INT
SET @first = 0
	SELECT @last = COUNT (Номер_заказа)
		FROM INSERTED
DECLARE @Capacity NVARCHAR (20)
DECLARE @Num_of_order INT, @Reg_num NVARCHAR (6), @Volume Объем, @Sum_volume NVARCHAR (5)
DECLARE C1 CURSOR SCROLL
	FOR SELECT Номер_заказа, Регистрационный_номер
		FROM INSERTED
OPEN C1
FETCH FIRST FROM C1
INTO @Num_of_order, @Reg_num
WHILE (@first < @last)
	BEGIN
		SELECT  @Volume = Объем
			FROM Доставка
				WHERE @Num_of_order = Номер_заказа
		SELECT @Capacity = Вместимость
			FROM Транспорт
				WHERE @Reg_num = Регистрационный_номер
		IF (@Capacity < @Volume)
			print ('Указанный объем превышает вместимость транспорта.')
		ELSE
			BEGIN
				INSERT INTO Доставка
					SELECT*
					FROM INSERTED
						WHERE Регистрационный_номер = @Reg_num
			END IF
			END



	--в конце,если идет элемент @firts = @last - 1,то нужно делать проверку на то, что суммарный объем доставки = суммарному объему в сборе_заказа, если все проходит, то изменяется статус заказа на одобренно и вторым курсором вчитаем из сорта объем из доставки.
------------------------------------Процедуры--------------------------------------

GO
CREATE PROCEDURE Конечная_ЗП (@ind_num int)
AS
DECLARE @allowence real
DECLARE @work_exp nvarchar (10)
SELECT @work_exp = Стаж
	FROM Сотрудники
		WHERE Личный_номер = @ind_num
IF (@work_exp >= 1 AND @work_exp < 5)
	BEGIN
		SET @allowence = 1.1
	END
ELSE 
IF (@work_exp >= 5 AND @work_exp < 10)
	BEGIN
		SET @allowence = 1.15
	END
ELSE
IF (@work_exp >= 10 AND @work_exp < 15)
	BEGIN
		SET @allowence = 1.2
	END
ELSE
	BEGIN
		SET @allowence = 1.3
	END
DECLARE @salary money
select @salary = З_П
	from Сотрудники
		WHERE Личный_номер = @ind_num
UPDATE Сотрудники
SET Сотрудники.З_П = @salary*@allowence
	WHERE Личный_номер = @ind_num
GO


select * 
from Сотрудники

GO

CREATE PROCEDURE sum_price_of_prod (@num_zak int)
AS
DECLARE @full_price_by_zakaz MONEY 
SET @full_price_by_zakaz  = (SELECT SUM (Сумма) 
	FROM Конечная_цена_товара
		WHERE Номер_заказа = @num_zak
							) 
select @full_price_by_zakaz as 'Суммарная стоимость заказа'
GO

--exec sum_price_of_prod '2'

--drop proc sum_price_of_prod

CREATE PROCEDURE The_cost_of_delivery_depends_on_the_distance (@num_zakaz int)
AS
DECLARE @Full_cost MONEY
DECLARE @way FLOAT (20)
	SELECT @way = Путь
		FROM Заказ
			WHERE Номер_заказа = @num_zakaz
DECLARE @price_per_km MONEY
SET @price_per_km = 500

SET @Full_cost = (@way * @price_per_km)
SELECT @Full_cost AS 'Стоимость доставки'
GO

--drop proc The_cost_of_delivery_depends_on_the_distance 

--exec The_cost_of_delivery_depends_on_the_distance '2'



CREATE PROCEDURE Discount_for_cooperation (@ID_Client int)
AS 
DECLARE @date_of_cooperation date
	SELECT @date_of_cooperation = Начало_сотрудничества
		FROM Клиент
			WHERE ID_Клиента = @ID_Client
DECLARE @discount real
DECLARE @coop int
SET @coop = DATEDIFF (month, @date_of_cooperation, GETDATE())

IF (@coop < 6)
	SET @discount = 0
IF (@coop >= 6 AND @coop < 12)
	SET @discount = 2
IF (@coop >= 12 AND @coop < 18)
	SET @discount = 4
IF (@coop >= 18)
	SET @discount = 6

SELECT @discount as 'Скидка за время сотрудничества, в %', @coop as 'Протяженность сотрудничества, в месяцах'
GO

--drop proc Discount_for_cooperation

--exec Discount_for_cooperation '14'

CREATE PROCEDURE The_final_cos_of_the_order (@num_zakaz int)
AS
DECLARE @final_cost money
DECLARE @full_price_by_zakaz MONEY 
SET @full_price_by_zakaz  = (SELECT SUM (Сумма) 
FROM Конечная_цена_товара
WHERE Номер_заказа = @num_zakaz
							) 

DECLARE @Full_cost MONEY
DECLARE @way FLOAT (20)
	SELECT @way = Путь
		FROM Заказ
			WHERE Номер_заказа = @num_zakaz
DECLARE @price_per_km MONEY
SET @price_per_km = 500

SET @Full_cost = (@way * @price_per_km)

SET @final_cost = (@full_price_by_zakaz + @Full_cost)

select @final_cost as 'Цена заказа с учетом доставки'
go

exec The_final_cos_of_the_order '2'
